#!/bin/bash

# ./rolling-files --source-path a --dest-path b --auto-yes c --keep-N d --file-pattern e --dry-run d

# ----- handle arguments ---- >

while [ $# -ne 0 ]
do
    arg="$1"
    case "$arg" in
        --source-path)
            SOURCE_PATH="$2"
            ;;
        --dest-path)
            DEST_PATH="$2"
            ;;
        --keep-N)
            KEEP_N="$2"
            ;;
        --file-pattern)
            PATTERN="$2"
            ;;
        --auto-yes)
            AUTO_YES=${2:-true}
            ;;
        --dry-run)
            DRY_RUN=${2:-true}
            ;;
        --help|-h|\?)
            IS_HELP=true
            ;;
        --verbose)
            IS_VERBOSE=true
            ;;
        *)
            ;;
    esac
    shift
done

# ------ handle help ------------- <

if [ "$IS_HELP" = true ]; then
 echo "usage:" 
 printf "\trolling-files --source-path [string] --dest-path [string] --file-pattern [string] --auto-yes [boolean] --keep-N [integer] --dry-run [boolean]\n"
 echo "example:"
 printf "\trolling-files --source-path ~/backup/ --dest-path /mnt/datacenter/backup/ --file-pattern \"foo_bar_[[:digit:]]{8}\.zip\" --auto-yes true --keep-N 3 --dry-run\n"

 exit 0
fi 
# ----------- main --------------- >

! [[ "$AUTO_YES" = true ]] && ! [[ "$AUTO_YES" = false ]] && AUTO_YES=false

[[ -z `echo "$KEEP_N" | grep -E ^\-?[0-9]+$` ]] && KEEP_N=3

IS_VERBOSE=${IS_VERBOSE:-false}
PATTERN=${PATTERN:-"([a-zA-Z0-9_]+)_[[:digit:]]{8}_[[:digit:]]{6}\.(bz2|tar\.gz|([a-zA-Z0-9_]+)?.sql)"}

if [ -z "$SOURCE_PATH" ]; then
 echo "source path is required."
 exit 1
fi

if [ -z "$DEST_PATH" ]; then
 echo "dest path is required."
 exit 1
fi

echo "IS VERBOSE? $IS_VERBOSE"
echo "AUTO YES? $AUTO_YES"
echo "DRY RUN? $DRY_RUN"
echo "SOURCE PATH: $SOURCE_PATH"
echo "DEST PATH: $DEST_PATH"
echo "PATTERN: $PATTERN"
echo "KEEP N: $KEEP_N"

[[ "$IS_VERBOSE" = true ]] && echo "***************** start - "`date`" ****************"

FILE_LIST=$(ls -lrth "$SOURCE_PATH" | awk {'print $9'} | awk NF)
FILE_LIST=$(echo "$FILE_LIST" | grep -E -o "$PATTERN" | uniq | sort)

NUM_OF_FILES=$(echo "$FILE_LIST" | wc -l)

if [ "$NUM_OF_FILES" -le 1 ]; then
 echo "nothing to do."
else
 NUM_OF_FILES_TO_MOVE=$([[ $NUM_OF_FILES -gt $KEEP_N ]] && echo `expr $NUM_OF_FILES - $KEEP_N` || echo 0)
 echo "NUM OF FILES TO MOVE: $NUM_OF_FILES_TO_MOVE"

 FILES_TO_MOVE=$(echo "$FILE_LIST" | head -n "-$KEEP_N")
 FILES_TO_KEEP=$(echo "$FILE_LIST" | tail -n "$KEEP_N")
 
 echo "FILES TO MOVE:" 
 echo "$FILES_TO_MOVE" | xargs -n 1 echo -e "\t"
 echo "FILES TO KEEP:"
 echo "$FILES_TO_KEEP" | xargs -n 1 echo -e "\t"

 if ! [ "$AUTO_YES" = true ]; then
  read -rp "Are you sure you want to continue? [Y/n] " key 
 fi

 if [ "$key" = 'Y' ] || [ "$key" = 'y' ] || [ "$AUTO_YES" = true ]; then
  echo "Y."
  # FILES_TO_MOVE MUST NOT BE EMPTY !!!!
  if ! [ -z "$FILES_TO_MOVE" ]; then

    # build rsync arguments
    RSYNC_ARGS=(-avh --progress --remove-source-files )
    if [ "$DRY_RUN" = true ]; then
      RSYNC_ARGS+=( --dry-run )
    fi

    # build rsync source files, convert newline to space
    FILES_TO_MOVE=$(ls -l "$SOURCE_PATH" | awk '{ print $9 }' | grep "$FILES_TO_MOVE" | xargs -n 1 -i echo "$SOURCE_PATH/{}")
    RSYNC_MOVE_FILES=( $(echo "$FILES_TO_MOVE" | xargs -n 1 -i echo {}) )

    # compose cmd
    rsync ${RSYNC_ARGS[@]} ${RSYNC_MOVE_FILES[@]} "$DEST_PATH"  
  fi

 else
  echo "Abort."
 fi

fi

[[ "$IS_VERBOSE" = true ]] && echo "***************** end- "`date`" ****************"